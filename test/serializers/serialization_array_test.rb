# frozen_string_literal: true

module ActiveModel
  class Serializer
    class SerializationArrayTest < ActiveSupport::TestCase
      class ArraySerializer < ActiveModel::Serializer
        attributes :items

        def items
          CollectionSerializer.new(object).as_json
        end
      end

      class Author < ActiveModelSerializers::Model
        attributes :id, :name
      end
      class AuthorSerializer < ActiveModel::Serializer
        attributes :id, :name
      end

      setup do
        @authors = [Author.new(id: 1, name: 'Blog Author')]
        @serializer_instance = ArraySerializer.new(@authors)
        @serializable = ActiveModelSerializers::SerializableResource.new(@authors, serializer: ArraySerializer, adapter: :attributes)
        @expected_hash = { items: [{ id: 1, name: 'Blog Author' }] }
        @expected_json = '{"items":[{"id":1,"name":"Blog Author"}]}'
      end

      test '#as_json is the same as generated by the attributes adapter' do
        assert_equal @serializable.as_json, @serializer_instance.as_json
        assert_equal @expected_hash, @serializer_instance.as_json
      end

      test '#to_json is the same as generated by the attributes adapter' do
        assert_equal @serializable.to_json, @serializer_instance.to_json
        assert_equal @expected_json, @serializer_instance.to_json
      end
    end
  end
end
